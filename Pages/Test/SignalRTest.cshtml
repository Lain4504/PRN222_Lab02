@page
@model HuynhNgocTien_SE18B01_A02.Pages.Test.SignalRTestModel
@{
    ViewData["Title"] = "SignalR Test";
}

<div class="container">
    <h2>SignalR Real-time Test</h2>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Connection Status</h5>
                </div>
                <div class="card-body">
                    <div id="connectionStatus" class="alert alert-warning">
                        Connecting...
                    </div>
                    <button id="connectBtn" class="btn btn-primary" onclick="connectSignalR()">Connect</button>
                    <button id="disconnectBtn" class="btn btn-secondary" onclick="disconnectSignalR()">Disconnect</button>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Test Actions</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" onclick="testNewsArticleCreate()">Test News Article Create</button><br>
                    <button class="btn btn-info mb-2" onclick="testCategoryCreate()">Test Category Create</button><br>
                    <button class="btn btn-warning mb-2" onclick="testAccountCreate()">Test Account Create</button><br>
                    <button class="btn btn-danger mb-2" onclick="clearMessages()">Clear Messages</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Real-time Messages</h5>
                </div>
                <div class="card-body">
                    <div id="messages" style="height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 10px;">
                        <!-- Messages will appear here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let testConnections = {};
        
        async function connectSignalR() {
            try {
                // Test connections
                testConnections.newsArticle = new signalR.HubConnectionBuilder()
                    .withUrl("/newsArticleHub")
                    .build();
                    
                testConnections.category = new signalR.HubConnectionBuilder()
                    .withUrl("/categoryHub")
                    .build();
                    
                testConnections.systemAccount = new signalR.HubConnectionBuilder()
                    .withUrl("/systemAccountHub")
                    .build();
                
                // Setup event handlers
                setupEventHandlers();
                
                // Start connections
                await Promise.all([
                    testConnections.newsArticle.start(),
                    testConnections.category.start(),
                    testConnections.systemAccount.start()
                ]);
                
                // Join groups
                await testConnections.newsArticle.invoke("JoinNewsArticleGroup");
                await testConnections.category.invoke("JoinCategoryGroup");
                await testConnections.systemAccount.invoke("JoinAccountGroup");
                
                updateConnectionStatus("Connected", "success");
                addMessage("‚úÖ SignalR connections established successfully", "success");
                
            } catch (error) {
                updateConnectionStatus("Connection Failed", "danger");
                addMessage("‚ùå Failed to connect: " + error.message, "danger");
            }
        }
        
        async function disconnectSignalR() {
            try {
                await Promise.all([
                    testConnections.newsArticle?.stop(),
                    testConnections.category?.stop(),
                    testConnections.systemAccount?.stop()
                ]);
                
                updateConnectionStatus("Disconnected", "secondary");
                addMessage("üîå SignalR connections closed", "info");
                
            } catch (error) {
                addMessage("‚ùå Error disconnecting: " + error.message, "danger");
            }
        }
        
        function setupEventHandlers() {
            // News Article events
            testConnections.newsArticle.on("ArticleCreated", (article) => {
                addMessage(`üì∞ Article Created: ${article.newsTitle}`, "success");
            });
            
            testConnections.newsArticle.on("ArticleUpdated", (article) => {
                addMessage(`üìù Article Updated: ${article.newsTitle}`, "info");
            });
            
            testConnections.newsArticle.on("ArticleDeleted", (articleId) => {
                addMessage(`üóëÔ∏è Article Deleted: ${articleId}`, "warning");
            });
            
            // Category events
            testConnections.category.on("CategoryCreated", (category) => {
                addMessage(`üìÅ Category Created: ${category.categoryName}`, "success");
            });
            
            testConnections.category.on("CategoryUpdated", (category) => {
                addMessage(`üìù Category Updated: ${category.categoryName}`, "info");
            });
            
            testConnections.category.on("CategoryDeleted", (categoryId) => {
                addMessage(`üóëÔ∏è Category Deleted: ${categoryId}`, "warning");
            });
            
            testConnections.category.on("CategoryListUpdated", () => {
                addMessage(`üîÑ Category List Updated`, "info");
            });
            
            // Account events
            testConnections.systemAccount.on("AccountCreated", (account) => {
                addMessage(`üë§ Account Created: ${account.accountName}`, "success");
            });
            
            testConnections.systemAccount.on("AccountUpdated", (account) => {
                addMessage(`üìù Account Updated: ${account.accountName}`, "info");
            });
            
            testConnections.systemAccount.on("AccountDeleted", (accountId) => {
                addMessage(`üóëÔ∏è Account Deleted: ${accountId}`, "warning");
            });
        }
        
        function updateConnectionStatus(status, type) {
            const statusDiv = document.getElementById('connectionStatus');
            statusDiv.className = `alert alert-${type}`;
            statusDiv.textContent = status;
        }
        
        function addMessage(message, type = 'info') {
            const messagesDiv = document.getElementById('messages');
            const timestamp = new Date().toLocaleTimeString();
            const messageDiv = document.createElement('div');
            messageDiv.className = `alert alert-${type} mb-2`;
            messageDiv.innerHTML = `<small>${timestamp}</small><br>${message}`;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        function clearMessages() {
            document.getElementById('messages').innerHTML = '';
        }
        
        function testNewsArticleCreate() {
            addMessage("üß™ Testing News Article Create - Go create an article to see real-time updates!", "primary");
        }
        
        function testCategoryCreate() {
            addMessage("üß™ Testing Category Create - Go create a category to see real-time updates!", "primary");
        }
        
        function testAccountCreate() {
            addMessage("üß™ Testing Account Create - Go create an account to see real-time updates!", "primary");
        }
        
        // Auto-connect when page loads
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(connectSignalR, 1000);
        });
    </script>
}
